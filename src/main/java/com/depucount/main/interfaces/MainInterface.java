package com.depucount.main.interfaces;

import com.depucount.main.EmailProcessor;
import com.depucount.main.DatabaseProcessor;

import com.depucount.main.utils.DatabaseTools;
import static com.depucount.main.utils.DatabaseTools.IsThisIDUnique;

import com.depucount.main.models.BasicWorkEntry;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static com.depucount.main.utils.DatabaseTools.DeleteFromCurrentList;
import com.depucount.main.utils.Converters;
import java.util.Collections;
import javax.swing.JFileChooser;

public class MainInterface extends javax.swing.JFrame {

    public static int indexOfEntryForEdit;

    public static int getIndexOfEntryForEdit() {
        return indexOfEntryForEdit;
    }

    public static void setIndexOfEntryForEdit(int indexOfEntryForEdit) {
        MainInterface.indexOfEntryForEdit = indexOfEntryForEdit;
    }

    public static ArrayList<BasicWorkEntry> currentListInProgess = new ArrayList();

    public static ArrayList<BasicWorkEntry> getCurrentListInProgess() {
        return currentListInProgess;
    }

    public static void setCurrentListInProgess(ArrayList<BasicWorkEntry> currentListInProgess) {
        MainInterface.currentListInProgess = currentListInProgess;
    }

    /**
     * Creates new form Interface
     */
    public MainInterface() {

        initComponents();

        UnsavedChanges(false);
        DatabaseProcessor.setNewDBAdded(false);
        EmailProcessor.setAttachmentIsMandatory(false);
        EmailProcessor.setIfSubjAndAttachRemotelySet(false);
        setAllDataFieldsToEnabled(false);

        setInputDataFieldToDefault();

        // make method
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        findDataBaseFileChooser = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        entryStartDateInterfaceYYYY = new javax.swing.JTextPane();
        fixStartTimeBtn = new javax.swing.JButton();
        fixFinishTimeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        objectCreatorBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        entryStartDateInterfaceMM = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        entryStartDateInterfaceDD = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        entryStartDateInterfaceHH = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        entryStartDateInterfaceMIN = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        entryFinishDateInterfaceHH = new javax.swing.JTextPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        entryFinishDateInterfaceMIN = new javax.swing.JTextPane();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        entryFinishDateInterfaceYYYY = new javax.swing.JTextPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        entryFinishDateInterfaceMM = new javax.swing.JTextPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        entryFinishDateInterfaceDD = new javax.swing.JTextPane();
        categoryChooseDropdownList = new javax.swing.JComboBox<>();
        newCategoryBtn = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        loadedXmlTable = new javax.swing.JTable();
        loadBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        dbTitleField = new javax.swing.JTextField();
        searchDBbtn = new javax.swing.JButton();
        deleteEntryBtn = new javax.swing.JButton();
        editEntryBtn = new javax.swing.JButton();
        editApproveBtn = new javax.swing.JButton();
        editsCancelBtn = new javax.swing.JButton();
        modeDetailsAboutTaskField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        createNewDBbtn = new javax.swing.JButton();
        saveChangesBtn = new javax.swing.JButton();
        quitFromDbBtn = new javax.swing.JButton();
        createReportOpenerBtn = new javax.swing.JButton();
        unsavedChangesLabel = new javax.swing.JLabel();
        cancelChanges = new javax.swing.JButton();
        prepEmailBtn = new javax.swing.JButton();
        prepOverviewslBtn = new javax.swing.JButton();

        findDataBaseFileChooser.setCurrentDirectory(new java.io.File("C:\\visma\\xml"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(null);
        setSize(new java.awt.Dimension(805, 428));

        entryStartDateInterfaceYYYY.setText("yyyy");
        entryStartDateInterfaceYYYY.setToolTipText("");
        entryStartDateInterfaceYYYY.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane2.setViewportView(entryStartDateInterfaceYYYY);
        entryStartDateInterfaceYYYY.getAccessibleContext().setAccessibleName("");

        fixStartTimeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/time.png"))); // NOI18N
        fixStartTimeBtn.setText("Fiksēt laiku");
        fixStartTimeBtn.setIconTextGap(10);
        fixStartTimeBtn.setPreferredSize(new java.awt.Dimension(123, 33));
        fixStartTimeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixStartTimeBtnActionPerformed(evt);
            }
        });

        fixFinishTimeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/time.png"))); // NOI18N
        fixFinishTimeBtn.setText("Fiksēt laiku");
        fixFinishTimeBtn.setIconTextGap(10);
        fixFinishTimeBtn.setMaximumSize(new java.awt.Dimension(85, 33));
        fixFinishTimeBtn.setMinimumSize(new java.awt.Dimension(85, 33));
        fixFinishTimeBtn.setPreferredSize(new java.awt.Dimension(123, 33));
        fixFinishTimeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixFinishTimeBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Uzdevums");
        jLabel1.setOpaque(true);

        jLabel2.setText("Sākums");
        jLabel2.setOpaque(true);
        jLabel2.setPreferredSize(new java.awt.Dimension(20, 25));

        jLabel3.setText("Beigas");
        jLabel3.setOpaque(true);
        jLabel3.setPreferredSize(new java.awt.Dimension(20, 25));

        objectCreatorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new entry.png"))); // NOI18N
        objectCreatorBtn.setIconTextGap(10);
        objectCreatorBtn.setLabel("Pievienot veikto uzdevumu");
        objectCreatorBtn.setPreferredSize(new java.awt.Dimension(161, 33));
        objectCreatorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectCreatorBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel4.setText("depuCounter");

        entryStartDateInterfaceMM.setText("mm");
        entryStartDateInterfaceMM.setToolTipText("");
        entryStartDateInterfaceMM.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane4.setViewportView(entryStartDateInterfaceMM);

        entryStartDateInterfaceDD.setText("dd");
        entryStartDateInterfaceDD.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane5.setViewportView(entryStartDateInterfaceDD);

        entryStartDateInterfaceHH.setText("hh");
        entryStartDateInterfaceHH.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane6.setViewportView(entryStartDateInterfaceHH);

        entryStartDateInterfaceMIN.setText("mm");
        entryStartDateInterfaceMIN.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane7.setViewportView(entryStartDateInterfaceMIN);

        jLabel5.setText(":");

        entryFinishDateInterfaceHH.setText("hh");
        entryFinishDateInterfaceHH.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane8.setViewportView(entryFinishDateInterfaceHH);

        entryFinishDateInterfaceMIN.setText("mm");
        entryFinishDateInterfaceMIN.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane9.setViewportView(entryFinishDateInterfaceMIN);

        jLabel6.setText(":");

        entryFinishDateInterfaceYYYY.setText("yyyy");
        entryFinishDateInterfaceYYYY.setToolTipText("");
        entryFinishDateInterfaceYYYY.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane3.setViewportView(entryFinishDateInterfaceYYYY);

        entryFinishDateInterfaceMM.setText("mm");
        entryFinishDateInterfaceMM.setToolTipText("");
        entryFinishDateInterfaceMM.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane10.setViewportView(entryFinishDateInterfaceMM);

        entryFinishDateInterfaceDD.setText("dd");
        entryFinishDateInterfaceDD.setPreferredSize(new java.awt.Dimension(20, 25));
        jScrollPane11.setViewportView(entryFinishDateInterfaceDD);

        categoryChooseDropdownList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryChooseDropdownListActionPerformed(evt);
            }
        });

        newCategoryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new task.png"))); // NOI18N
        newCategoryBtn.setText("Jauns uzdevums");
        newCategoryBtn.setIconTextGap(10);
        newCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCategoryBtnActionPerformed(evt);
            }
        });

        loadedXmlTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        loadedXmlTable.setCellSelectionEnabled(true);
        loadedXmlTable.setRequestFocusEnabled(false);
        jScrollPane12.setViewportView(loadedXmlTable);

        loadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.png"))); // NOI18N
        loadBtn.setText("Atjaunot sarakstu");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Datubāze");

        dbTitleField.setEditable(false);
        dbTitleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbTitleFieldActionPerformed(evt);
            }
        });

        searchDBbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search db.png"))); // NOI18N
        searchDBbtn.setText("Meklēt");
        searchDBbtn.setIconTextGap(10);
        searchDBbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDBbtnActionPerformed(evt);
            }
        });

        deleteEntryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        deleteEntryBtn.setText("dzēst");
        deleteEntryBtn.setIconTextGap(10);
        deleteEntryBtn.setPreferredSize(new java.awt.Dimension(59, 33));
        deleteEntryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEntryBtnActionPerformed(evt);
            }
        });

        editEntryBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fix.png"))); // NOI18N
        editEntryBtn.setText("labot");
        editEntryBtn.setIconTextGap(10);
        editEntryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEntryBtnActionPerformed(evt);
            }
        });

        editApproveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/savechanges.png"))); // NOI18N
        editApproveBtn.setText("Apstiprināt izmaiņas");
        editApproveBtn.setEnabled(false);
        editApproveBtn.setIconTextGap(10);
        editApproveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editApproveBtnActionPerformed(evt);
            }
        });

        editsCancelBtn.setText("Atcelt");
        editsCancelBtn.setEnabled(false);
        editsCancelBtn.setIconTextGap(10);
        editsCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editsCancelBtnActionPerformed(evt);
            }
        });

        modeDetailsAboutTaskField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeDetailsAboutTaskFieldActionPerformed(evt);
            }
        });

        jLabel8.setText("Papildus detaļas");
        jLabel8.setOpaque(true);

        createNewDBbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/new db.png"))); // NOI18N
        createNewDBbtn.setText("Jauna");
        createNewDBbtn.setIconTextGap(10);
        createNewDBbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewDBbtnActionPerformed(evt);
            }
        });

        saveChangesBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/savedb.png"))); // NOI18N
        saveChangesBtn.setText("Saglabāt izmaiņas");
        saveChangesBtn.setIconTextGap(10);
        saveChangesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesBtnActionPerformed(evt);
            }
        });

        quitFromDbBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/closedb.png"))); // NOI18N
        quitFromDbBtn.setText("Iziet no datubāzes");
        quitFromDbBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        quitFromDbBtn.setIconTextGap(10);
        quitFromDbBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitFromDbBtnActionPerformed(evt);
            }
        });

        createReportOpenerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/xls.png"))); // NOI18N
        createReportOpenerBtn.setText("Sagatavot veidlapu");
        createReportOpenerBtn.setIconTextGap(10);
        createReportOpenerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createReportOpenerBtnActionPerformed(evt);
            }
        });

        unsavedChangesLabel.setFont(new java.awt.Font("Tahoma", 2, 9)); // NOI18N
        unsavedChangesLabel.setForeground(new java.awt.Color(255, 51, 51));
        unsavedChangesLabel.setText("Nesaglabātas izmaiņas");

        cancelChanges.setText("Atcelt izmaiņas");
        cancelChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelChangesActionPerformed(evt);
            }
        });

        prepEmailBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/email.png"))); // NOI18N
        prepEmailBtn.setText("Sagatavot e-pastu");
        prepEmailBtn.setIconTextGap(10);
        prepEmailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepEmailBtnActionPerformed(evt);
            }
        });

        prepOverviewslBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/overview.png"))); // NOI18N
        prepOverviewslBtn.setText("Pārskata logi");
        prepOverviewslBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        prepOverviewslBtn.setIconTextGap(10);
        prepOverviewslBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepOverviewslBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(createReportOpenerBtn)
                                    .addComponent(prepEmailBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(prepOverviewslBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(unsavedChangesLabel)
                                        .addGap(99, 99, 99))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(loadBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(editEntryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(deleteEntryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quitFromDbBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveChangesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelChanges))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane8)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(10, 10, 10)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                    .addComponent(jScrollPane9))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fixStartTimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fixFinishTimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchDBbtn)
                                        .addGap(46, 46, 46)
                                        .addComponent(createNewDBbtn))
                                    .addComponent(dbTitleField)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(categoryChooseDropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(modeDetailsAboutTaskField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(objectCreatorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editApproveBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editsCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(createNewDBbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchDBbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(dbTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(newCategoryBtn)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryChooseDropdownList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(modeDetailsAboutTaskField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane5)
                                .addComponent(jScrollPane4)
                                .addComponent(jScrollPane2)
                                .addComponent(jScrollPane6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fixStartTimeBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane10)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jScrollPane8)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane9)
                                    .addComponent(jScrollPane11)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(editApproveBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(objectCreatorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(editsCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(saveChangesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cancelChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(unsavedChangesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fixFinishTimeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10)
                        .addComponent(loadBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteEntryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quitFromDbBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editEntryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(createReportOpenerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prepEmailBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prepOverviewslBtn)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        searchDBbtn.getAccessibleContext().setAccessibleName("chooseDbBtn");
        editEntryBtn.getAccessibleContext().setAccessibleName("rediģēt");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setInputDataFieldToDefault() {

        categoryChooseDropdownList.setSelectedItem(null);
        modeDetailsAboutTaskField.setText("");

        entryStartDateInterfaceYYYY.setText(LocalDateTime.now().getYear() + "");
        entryStartDateInterfaceMM.setText(Converters.AddZerosToTime(LocalDateTime.now().getMonthValue()) + "");
        entryStartDateInterfaceDD.setText(Converters.AddZerosToTime(LocalDateTime.now().getDayOfMonth()) + "");
        entryStartDateInterfaceHH.setText("");
        entryStartDateInterfaceMIN.setText("");

        entryFinishDateInterfaceYYYY.setText(LocalDateTime.now().getYear() + "");
        entryFinishDateInterfaceMM.setText(Converters.AddZerosToTime(LocalDateTime.now().getMonthValue()) + "");
        entryFinishDateInterfaceDD.setText(Converters.AddZerosToTime(LocalDateTime.now().getDayOfMonth()) + "");
        entryFinishDateInterfaceHH.setText("");
        entryFinishDateInterfaceMIN.setText("");

    }

    private void setAllDataFieldsToEnabled(Boolean yes) {

        jLabel1.setEnabled(yes);
        jLabel2.setEnabled(yes);
        jLabel3.setEnabled(yes);
        jLabel8.setEnabled(yes);
        categoryChooseDropdownList.setEnabled(yes);
        newCategoryBtn.setEnabled(yes);
        modeDetailsAboutTaskField.setEnabled(yes);

        entryStartDateInterfaceYYYY.setEnabled(yes);
        entryStartDateInterfaceMM.setEnabled(yes);
        entryStartDateInterfaceDD.setEnabled(yes);
        entryStartDateInterfaceHH.setEnabled(yes);
        entryStartDateInterfaceMIN.setEnabled(yes);

        entryFinishDateInterfaceYYYY.setEnabled(yes);
        entryFinishDateInterfaceMM.setEnabled(yes);
        entryFinishDateInterfaceDD.setEnabled(yes);
        entryFinishDateInterfaceHH.setEnabled(yes);
        entryFinishDateInterfaceMIN.setEnabled(yes);

        fixFinishTimeBtn.setEnabled(yes);
        fixStartTimeBtn.setEnabled(yes);

        loadBtn.setEnabled(yes);
        editEntryBtn.setEnabled(yes);
        deleteEntryBtn.setEnabled(yes);
        objectCreatorBtn.setEnabled(yes);
        loadedXmlTable.setEnabled(yes);

        quitFromDbBtn.setEnabled(yes);
        createReportOpenerBtn.setEnabled(yes);

        prepEmailBtn.setEnabled(yes);
        prepOverviewslBtn.setEnabled(yes);

    }

    private void fixStartTimeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixStartTimeBtnActionPerformed

        LocalDateTime xx = LocalDateTime.now();

        entryStartDateInterfaceYYYY.setText(xx.getYear() + "");
        entryStartDateInterfaceMM.setText(Converters.AddZerosToTime(xx.getMonthValue()));
        entryStartDateInterfaceDD.setText(Converters.AddZerosToTime(xx.getDayOfMonth()));
        entryStartDateInterfaceHH.setText(Converters.AddZerosToTime(xx.getHour()));
        entryStartDateInterfaceMIN.setText(Converters.AddZerosToTime(xx.getMinute()));

    }//GEN-LAST:event_fixStartTimeBtnActionPerformed

    public Boolean allFieldsAreFullAndValid() {

        if (categoryChooseDropdownList.getSelectedItem() != null) {
            if (Converters.PartOfDateIsValid(entryStartDateInterfaceYYYY.getText(), 4)
                    && Converters.PartOfDateIsValid(entryStartDateInterfaceMM.getText(), 2)
                    && Converters.PartOfDateIsValid(entryStartDateInterfaceDD.getText(), 2)
                    && Converters.PartOfDateIsValid(entryStartDateInterfaceHH.getText(), 2)
                    && Converters.PartOfDateIsValid(entryStartDateInterfaceMIN.getText(), 2)) {

                if (Converters.PartOfDateIsValid(entryFinishDateInterfaceYYYY.getText(), 4)
                        && Converters.PartOfDateIsValid(entryFinishDateInterfaceMM.getText(), 2)
                        && Converters.PartOfDateIsValid(entryFinishDateInterfaceDD.getText(), 2)
                        && Converters.PartOfDateIsValid(entryFinishDateInterfaceHH.getText(), 2)
                        && Converters.PartOfDateIsValid(entryFinishDateInterfaceMIN.getText(), 2)) {
                    return true;
                } else {
                    JOptionPane.showMessageDialog(this, "Pārbaudi beigu laika ievades datus");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Pārbaudi sākuma laika ievades datus");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Norādi uzdevumu");
        }
        return false;
    }

    private void fixFinishTimeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixFinishTimeBtnActionPerformed

        LocalDateTime xx = LocalDateTime.now();

        entryFinishDateInterfaceYYYY.setText(xx.getYear() + "");
        entryFinishDateInterfaceMM.setText(Converters.AddZerosToTime(xx.getMonthValue()));
        entryFinishDateInterfaceDD.setText(Converters.AddZerosToTime(xx.getDayOfMonth()));
        entryFinishDateInterfaceHH.setText(Converters.AddZerosToTime(xx.getHour()));
        entryFinishDateInterfaceMIN.setText(Converters.AddZerosToTime(xx.getMinute()));
    }//GEN-LAST:event_fixFinishTimeBtnActionPerformed

    public BasicWorkEntry getDefaultEntryObjectFromInput() {

        // check here
        if (allFieldsAreFullAndValid()) {

            String finalReceivedStartTime
                    = entryStartDateInterfaceYYYY.getText() + "-"
                    + Converters.AddZerosToTime(Integer.parseInt(entryStartDateInterfaceMM.getText())) + "-"
                    + Converters.AddZerosToTime(Integer.parseInt(entryStartDateInterfaceDD.getText())) + " "
                    + Converters.AddZerosToTime(Integer.parseInt(entryStartDateInterfaceHH.getText())) + ":"
                    + Converters.AddZerosToTime(Integer.parseInt(entryStartDateInterfaceMIN.getText()));

            String finalReceivedFinishTime
                    = entryFinishDateInterfaceYYYY.getText() + "-"
                    + Converters.AddZerosToTime(Integer.parseInt(entryFinishDateInterfaceMM.getText())) + "-"
                    + Converters.AddZerosToTime(Integer.parseInt(entryFinishDateInterfaceDD.getText())) + " "
                    + Converters.AddZerosToTime(Integer.parseInt(entryFinishDateInterfaceHH.getText())) + ":"
                    + Converters.AddZerosToTime(Integer.parseInt(entryFinishDateInterfaceMIN.getText()));

            String finalWorkName = String.valueOf(categoryChooseDropdownList.getSelectedItem());
            String finalWorkDetails = String.valueOf(modeDetailsAboutTaskField.getText());

            ZoneId zoneID = ZoneId.systemDefault();

            if (Converters.CompareIfStartIsSmallerThanFinish(finalReceivedStartTime, finalReceivedFinishTime)) {

                return new BasicWorkEntry(
                        (finalWorkName.substring(0, 5).toUpperCase()
                        + LocalDateTime.parse(
                                finalReceivedStartTime, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"))
                                .atZone(zoneID).toEpochSecond()),
                        finalWorkName,
                        finalWorkDetails,
                        finalReceivedStartTime,
                        finalReceivedFinishTime);
            } else {
                JOptionPane.showMessageDialog(this, "Starta laiks ir mazāks vai vienāds ar beigu laiku");
                return null;
            }
        }
        return null;
    }

    private void objectCreatorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectCreatorBtnActionPerformed
        // TODO add your handling code here:

        BasicWorkEntry receivedData = getDefaultEntryObjectFromInput();

        if (receivedData != null) {

            if (IsThisIDUnique(receivedData.getId(), currentListInProgess)) {

                boolean add = currentListInProgess.add(receivedData);
                LoadTheWorkList();
                JOptionPane.showMessageDialog(this, "Objekts pievienots");
                setInputDataFieldToDefault();
                UnsavedChanges(true);

            } else {
                JOptionPane.showMessageDialog(this, "Šāds darbs ar šādu starta laiku jau ir pievienots");
            }
        } else {
            //  JOptionPane.showMessageDialog(this, "Nav ko pievienot");
        }

    }//GEN-LAST:event_objectCreatorBtnActionPerformed

    public void UnsavedChanges(Boolean yes) {
        if (yes) {
            DatabaseProcessor.setUnsavedChanges(true);
            unsavedChangesLabel.setVisible(true);
            saveChangesBtn.setEnabled(true);
            cancelChanges.setEnabled(true);
        } else {
            DatabaseProcessor.setUnsavedChanges(false);
            unsavedChangesLabel.setVisible(false);
            saveChangesBtn.setEnabled(false);
            cancelChanges.setEnabled(false);
        }

    }

    private void categoryChooseDropdownListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryChooseDropdownListActionPerformed


    }//GEN-LAST:event_categoryChooseDropdownListActionPerformed

    private void newCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCategoryBtnActionPerformed

        new AddNewCategory(this, true).setVisible(true);

        LoadCategoryList();

    }//GEN-LAST:event_newCategoryBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed

        LoadTheWorkList();
    }//GEN-LAST:event_loadBtnActionPerformed

    private void dbTitleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbTitleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbTitleFieldActionPerformed

    private void searchDBbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDBbtnActionPerformed

        int wasChosen = findDataBaseFileChooser.showOpenDialog(null);
        if (wasChosen == JFileChooser.APPROVE_OPTION) {
            if (findDataBaseFileChooser.getSelectedFile().getName() != null) {
                DatabaseProcessor.setFileNameDB(findDataBaseFileChooser.getSelectedFile().getName());
                DatabaseProcessor.setFilepathDB(findDataBaseFileChooser.getSelectedFile().getAbsolutePath());
                dbTitleField.setText(DatabaseProcessor.getFileNameDB());

                setCurrentListInProgess(DatabaseProcessor.CreateEntryListFromXMLData());

                LoadTheWorkList();
                LoadCategoryList();
                setInputDataFieldToDefault();
                UnsavedChanges(false);
                setAllDataFieldsToEnabled(true);

                JOptionPane.showMessageDialog(this, "Fails ielādēts: " + DatabaseProcessor.getFileNameDB());
            }
        }
    }//GEN-LAST:event_searchDBbtnActionPerformed

    private void deleteEntryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEntryBtnActionPerformed

        int[] SelectedRow = loadedXmlTable.getSelectedRows();

        if (SelectedRow.length != 0) {
            DeleteFromCurrentList(SelectedRow);
            LoadTheWorkList();
            UnsavedChanges(true);

        } else {
            JOptionPane.showMessageDialog(this, "Nekas nav atzīmēts dzēšanai");
        }

    }//GEN-LAST:event_deleteEntryBtnActionPerformed

    public void SwitchOnEditLogView(boolean x) {

        objectCreatorBtn.setEnabled(!x);

        jLabel7.setEnabled(!x);
        dbTitleField.setEnabled(!x);
        searchDBbtn.setEnabled(!x);
        createNewDBbtn.setEnabled(!x);
        editApproveBtn.setEnabled(x);
        editsCancelBtn.setEnabled(x);
        quitFromDbBtn.setEnabled(!x);
        createReportOpenerBtn.setEnabled(!x);
        deleteEntryBtn.setEnabled(!x);
    }

    private void editEntryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntryBtnActionPerformed

        int[] SelectedRow = loadedXmlTable.getSelectedRows();

        if (SelectedRow.length == 1) {

            SwitchOnEditLogView(true);

            categoryChooseDropdownList.setSelectedItem(
                    currentListInProgess.get(SelectedRow[0]).getWorkName()
            );
            modeDetailsAboutTaskField.setText(
                    currentListInProgess.get(SelectedRow[0]).getWorkDetails()
            );

            LocalDateTime startTimeToEdit = LocalDateTime.parse(
                    currentListInProgess.get(SelectedRow[0]).getStartTime(),
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

            LocalDateTime finishTimeToEdit = LocalDateTime.parse(
                    currentListInProgess.get(SelectedRow[0]).getEndTime(),
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));

            entryStartDateInterfaceYYYY.setText(startTimeToEdit.getYear() + "");
            entryStartDateInterfaceMM.setText(Converters.AddZerosToTime(startTimeToEdit.getMonthValue()));
            entryStartDateInterfaceDD.setText(Converters.AddZerosToTime(startTimeToEdit.getDayOfMonth()));
            entryStartDateInterfaceHH.setText(Converters.AddZerosToTime(startTimeToEdit.getHour()));
            entryStartDateInterfaceMIN.setText(Converters.AddZerosToTime(startTimeToEdit.getMinute()));

            entryFinishDateInterfaceYYYY.setText(finishTimeToEdit.getYear() + "");
            entryFinishDateInterfaceMM.setText(Converters.AddZerosToTime(finishTimeToEdit.getMonthValue()));
            entryFinishDateInterfaceDD.setText(Converters.AddZerosToTime(finishTimeToEdit.getDayOfMonth()));
            entryFinishDateInterfaceHH.setText(Converters.AddZerosToTime(finishTimeToEdit.getHour()));
            entryFinishDateInterfaceMIN.setText(Converters.AddZerosToTime(finishTimeToEdit.getMinute()));

            setIndexOfEntryForEdit(SelectedRow[0]);
            System.out.println("Uz izmaiņām pieteiktā ieraksta index: " + getIndexOfEntryForEdit());

        } else {
            JOptionPane.showMessageDialog(this, "Izvēlies vienu ierakstu, ko labot");
        }

    }//GEN-LAST:event_editEntryBtnActionPerformed

    private void editApproveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editApproveBtnActionPerformed

        BasicWorkEntry receivedData = getDefaultEntryObjectFromInput();
        System.out.println("Uz izmaiņām saņemtais ieraksts index: " + indexOfEntryForEdit);
        if (receivedData != null) {
            DatabaseTools.EditInDBObject(indexOfEntryForEdit, receivedData);
            SwitchOnEditLogView(false);
            setInputDataFieldToDefault();
            LoadTheWorkList();
            UnsavedChanges(true);
        } else {
            JOptionPane.showMessageDialog(this, "Pārbaudi ievades datus");
        }
    }//GEN-LAST:event_editApproveBtnActionPerformed

    private void editsCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editsCancelBtnActionPerformed

        SwitchOnEditLogView(false);
        setInputDataFieldToDefault();


    }//GEN-LAST:event_editsCancelBtnActionPerformed

    private void modeDetailsAboutTaskFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeDetailsAboutTaskFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modeDetailsAboutTaskFieldActionPerformed

    private void createNewDBbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewDBbtnActionPerformed

        new AddNewDBlink(this, true).setVisible(true);

        if (DatabaseProcessor.getNewDBAdded() == true
                && DatabaseProcessor.getFilepathDB() != null) {
            setAllDataFieldsToEnabled(true);
            dbTitleField.setText(DatabaseProcessor.getFileNameDB());

            setInputDataFieldToDefault();
            setAllDataFieldsToEnabled(true);
            if (currentListInProgess != null
                    || currentListInProgess.isEmpty()) {
                currentListInProgess.clear();
                LoadCategoryList();
                LoadTheWorkList();

            }
            UnsavedChanges(false);

        }

    }//GEN-LAST:event_createNewDBbtnActionPerformed

    private void saveChangesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesBtnActionPerformed

        Boolean unsavedChanges = DatabaseProcessor.getUnsavedChanges();

        if (unsavedChanges) {

            Boolean isNewDataBase = DatabaseProcessor.XMLBuilder(currentListInProgess);
            // building/rebuilding XML, checking if it was a new db

            if (isNewDataBase) {

                if (!currentListInProgess.isEmpty() || currentListInProgess != null) {
                    JOptionPane.showMessageDialog(this, "Jaunajā failā nekas nav ievietots: " + DatabaseProcessor.getFileNameDB());
                } else {

                    JOptionPane.showMessageDialog(this, "Izveidots jauns fails:  " + DatabaseProcessor.getFileNameDB());
                    UnsavedChanges(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Izmaiņas saglabātas failam: " + DatabaseProcessor.getFileNameDB());
                UnsavedChanges(false);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nav izmaiņu, ko saglabāt failam: " + DatabaseProcessor.getFileNameDB());
        }


    }//GEN-LAST:event_saveChangesBtnActionPerformed

    private void quitFromDbBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitFromDbBtnActionPerformed

        UnsavedChanges(false);
        currentListInProgess.clear();
        setAllDataFieldsToEnabled(false);
        setInputDataFieldToDefault();
        dbTitleField.setText(null);

        DatabaseProcessor.setFileNameDB(null);
        DatabaseProcessor.setFilepathDB(null);
        LoadTheWorkList();
        LoadCategoryList();


    }//GEN-LAST:event_quitFromDbBtnActionPerformed

    private void createReportOpenerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createReportOpenerBtnActionPerformed

        new ReportRequest(this, true).setVisible(true);

    }//GEN-LAST:event_createReportOpenerBtnActionPerformed

    public void RedoListBySorting() {

        ArrayList<BasicWorkEntry> currentListInProgessSorted = new ArrayList();

        ArrayList<Long> uniqueEpochTimes = new ArrayList();
        for (BasicWorkEntry entry : currentListInProgess) {

            if (!uniqueEpochTimes.contains(entry.getEpochStartTime())) {
                uniqueEpochTimes.add(entry.getEpochStartTime());
            }
        }
        Collections.sort(uniqueEpochTimes, Collections.reverseOrder());
        int epochcounter = 0;
        int entrycounter = 0;
        for (Long epoch : uniqueEpochTimes) {

            for (BasicWorkEntry entry : currentListInProgess) {

                if (epoch.equals(entry.getEpochStartTime())) {

                    currentListInProgessSorted.add(entry);
                    System.out.println(epoch + " : " + entry.getId());
                    epochcounter++;
                    entrycounter++;

                }
            }

        }

        currentListInProgess.clear();
        setCurrentListInProgess(currentListInProgessSorted);

    }

    private void cancelChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelChangesActionPerformed

        UnsavedChanges(false);
        currentListInProgess.clear();
        setCurrentListInProgess(DatabaseProcessor.CreateEntryListFromXMLData());

        LoadCategoryList();
        LoadTheWorkList();
        setInputDataFieldToDefault();

        // TODO add your handling code here:
    }//GEN-LAST:event_cancelChangesActionPerformed

    private void prepEmailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepEmailBtnActionPerformed
        EmailProcessor.setAttachmentIsMandatory(false);

        new EmailMessageForm(this, true).setVisible(true);
    }//GEN-LAST:event_prepEmailBtnActionPerformed

    private void prepOverviewslBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepOverviewslBtnActionPerformed

        new Overviews(this, true).setVisible(true);


    }//GEN-LAST:event_prepOverviewslBtnActionPerformed

    public void LoadCategoryList() {

        categoryChooseDropdownList.removeAllItems();
        List<String> categoriesFromCurrentList = null;
        categoriesFromCurrentList = DatabaseTools.CategoriesFromCurrentDB(currentListInProgess);

        if (DatabaseTools.possibleNewCategory != null) {
            categoriesFromCurrentList.add(DatabaseTools.possibleNewCategory);
            DatabaseTools.possibleNewCategory = null;
        }
        categoriesFromCurrentList.sort(String.CASE_INSENSITIVE_ORDER);

        categoriesFromCurrentList.forEach((String x) -> {
            x = Converters.MakeFirstCharToUpper(x);
            if (((DefaultComboBoxModel) categoryChooseDropdownList.getModel()).getIndexOf(x) == -1) {

                categoryChooseDropdownList.addItem(x);
            }

        });

        categoryChooseDropdownList.setSelectedItem(null);
    }

    private void LoadTheWorkList() {

        RedoListBySorting();
        System.out.println("Loading started");

        Boolean listFound = true;

        if (currentListInProgess.isEmpty() || currentListInProgess == null) {
            listFound = false;
        }
        int row = 0;
        int maxRows = 1;
        if (listFound) {
            maxRows = currentListInProgess.size();
        }

        DefaultTableModel model = new DefaultTableModel(maxRows, 5);
        Object[] columnNames = {"Uzdevums", "Sākuma laiks", "Beigu laiks", "Ilgums", "Detaļas"};
        model.setColumnIdentifiers(columnNames);

        loadedXmlTable.setModel(model);

        if (listFound) {

            for (BasicWorkEntry entry : currentListInProgess) {

                loadedXmlTable.getModel().setValueAt(entry.getWorkName(), row, 0);
                loadedXmlTable.getModel().setValueAt(entry.getStartTime(), row, 1);
                loadedXmlTable.getModel().setValueAt(entry.getEndTime(), row, 2);
                loadedXmlTable.getModel().setValueAt(entry.getUpperRoundWorkDuration(), row, 3);
                loadedXmlTable.getModel().setValueAt(entry.getWorkDetails(), row, 4);
                row++;

            }
        }
        System.out.println("Loading finished, loaded entries: " + row);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new MainInterface().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelChanges;
    private javax.swing.JComboBox<String> categoryChooseDropdownList;
    private javax.swing.JButton createNewDBbtn;
    private javax.swing.JButton createReportOpenerBtn;
    private javax.swing.JTextField dbTitleField;
    private javax.swing.JButton deleteEntryBtn;
    private javax.swing.JButton editApproveBtn;
    private javax.swing.JButton editEntryBtn;
    private javax.swing.JButton editsCancelBtn;
    private javax.swing.JTextPane entryFinishDateInterfaceDD;
    private javax.swing.JTextPane entryFinishDateInterfaceHH;
    private javax.swing.JTextPane entryFinishDateInterfaceMIN;
    private javax.swing.JTextPane entryFinishDateInterfaceMM;
    private javax.swing.JTextPane entryFinishDateInterfaceYYYY;
    private javax.swing.JTextPane entryStartDateInterfaceDD;
    private javax.swing.JTextPane entryStartDateInterfaceHH;
    private javax.swing.JTextPane entryStartDateInterfaceMIN;
    private javax.swing.JTextPane entryStartDateInterfaceMM;
    private javax.swing.JTextPane entryStartDateInterfaceYYYY;
    private javax.swing.JFileChooser findDataBaseFileChooser;
    private javax.swing.JButton fixFinishTimeBtn;
    private javax.swing.JButton fixStartTimeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton loadBtn;
    private javax.swing.JTable loadedXmlTable;
    private javax.swing.JTextField modeDetailsAboutTaskField;
    private javax.swing.JButton newCategoryBtn;
    private javax.swing.JButton objectCreatorBtn;
    private javax.swing.JButton prepEmailBtn;
    private javax.swing.JButton prepOverviewslBtn;
    private javax.swing.JButton quitFromDbBtn;
    private javax.swing.JButton saveChangesBtn;
    private javax.swing.JButton searchDBbtn;
    private javax.swing.JLabel unsavedChangesLabel;
    // End of variables declaration//GEN-END:variables
}
